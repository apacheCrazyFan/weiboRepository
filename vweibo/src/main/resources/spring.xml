<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/websocket 
        http://www.springframework.org/schema/websocket/spring-websocket.xsd">

	<!-- 注解方式，指定bean可能出现的位置 即扫描bean包 -->
	<context:component-scan base-package="com.yc.weibo" />

	<context:component-scan base-package="com.yc.weibo.websocket.SocketConfig" />
	<context:component-scan base-package="com.yc.weibo.websocket.WebsocketEndPoint" ></context:component-scan>
	<context:component-scan base-package="com.yc.weibo.websocket.HandshakeInterceptor" ></context:component-scan>
	
	
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

	<!-- 引入外部属性文件 -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- 数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}"
		p:username="${jdbc.username}" p:password="${jdbc.password}"
		p:initialSize="${jdbc.initialSize}" p:minIdle="${jdbc.minIdle}"
		p:maxTotal="${jdbc.maxTotal}" />

	<!-- 配制mybatis的会话工厂对象 --><!-- 也就是mybatis和spring整合框架 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource" p:typeAliasesPackage="com.yc.weibo.entity"
		p:mapperLocations="classpath:mapper/*Mapper.xml" />

	<!-- 配制映射接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:sqlSessionFactoryBeanName="sqlSessionFactory" p:basePackage="com.yc.weibo.mapper" />


	<!-- JSM -->
    <!-- 使用activemq中的连接工厂,提供一个brokerUrl,这里表示本地 -->   
    <!-- <bean id = "connectionFactory" class = "org.apache.activemq.ActiveMQConnectionFactory">   
        <property name="brokerURL" value="vm://localhost" />   
    </bean> -->
	<!-- 这里我们用构造方法注入 connectionFactory-->   
    <!-- <bean id = "jmsTemplate" class = "org.springframework.jms.core.JmsTemplate">   
        <constructor-arg ref="connectionFactory"></constructor-arg>   
    </bean>  -->  
    <!-- 使用activemq中的点对点消息模型,随意指定一个地址 -->   
    <!-- <bean id="destination" class="org.apache.activemq.command.ActiveMQQueue">   
            <constructor-arg value="test/queue"/>   
    </bean> --> 
	
	<!--邮件发送处理bean -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.smtp.host}"></property>
		<property name="username" value="${mail.smtp.username}"></property>
		<property name="password" value="${mail.smtp.password}"></property>
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
				<prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
			</props>
		</property>
	</bean>

	<!-- 响应处理，视图处理器配置 -->
	<!-- 请求拦截后，交给对应请求处理操作后，根据返回结果，拼接响应页面路径 -->
	<!-- prefix + 返回值 + suffix -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">

	</bean>


	<!-- 取消所有请求拦截的重定向拦截 -->
	<!-- 默认静态资源的请求处理 -->
	<mvc:default-servlet-handler />

	<!-- 控制器驱动处理 --> <!-- 同时要注意这个可以配置我们自己的数据转换 -->
	<!-- <mvc:annotation-driven /> -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- SpringMVC在超出上传文件限制时,会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的,而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时,自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>
			</props>
		</property>
	</bean>

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxInMemorySize" value="10240" />
		<property name="maxUploadSize" value="-1" />
	</bean>
	<!-- <mvc:annotation-driven conversion-service="conversionService"/> -->

	<!-- <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean"> 
		<property name="converters"> <set> <ref bean="employeeHandler"/> 这个是自定义的数据到对象或者其他的数据转换Handler类 
		</set> </property> </bean> -->

	<!-- 1.配制事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!-- 2.配制事务关联 --><!-- 事务支持的注解 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- websocket -->
	<bean id="websocket" class="com.yc.weibo.websocket.SystemWebSocketHandler" />

	<!-- sockjs（当浏览器版本过低不支持时模拟浏览器websocket）的注册？实力化？ -->
	<websocket:handlers>
		<websocket:mapping path="/sockjs/webSocket" handler="websocket" />
 		<websocket:handshake-interceptors>
 			<bean class="com.yc.weibo.websocket.HandshakeInterceptor" />
 		</websocket:handshake-interceptors>
 		<websocket:sockjs />
 	</websocket:handlers>
 	<!-- websocket -->
 	<websocket:handlers>
		<websocket:mapping path="/webSocket" handler="websocket" />
 		<websocket:handshake-interceptors>
 			<bean class="com.yc.weibo.websocket.HandshakeInterceptor" />
 		</websocket:handshake-interceptors>
 	</websocket:handlers>
</beans>